import React, { useState, useEffect } from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/footer';
// Helper function for HTML escaping (good for preventing XSS)
const escapeHtml = (text) => {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
};

const ReservationPage = () => {
  // --- State Management ---
  const [reservations, setReservations] = useState([]);
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    date: '',
    time: '',
    guests: '',
    specialRequests: ''
  });
  const [errors, setErrors] = useState({});
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);

  // Set minimum date to today for the date input
  useEffect(() => {
    const today = new Date().toISOString().split('T')[0];
    const dateInput = document.getElementById('date');
    if (dateInput) {
      dateInput.min = today;
    }
  }, []);

  // Load existing reservations from localStorage on initial mount
  useEffect(() => {
    const savedReservations = localStorage.getItem('reservations');
    if (savedReservations) {
      setReservations(JSON.parse(savedReservations));
    }
  }, []);

  // Load saved form data from localStorage on initial mount
  useEffect(() => {
    const savedData = localStorage.getItem('reservationFormData');
    if (savedData) {
      setFormData(JSON.parse(savedData));
    }
  }, []);

  // Save form data to localStorage as it changes
  useEffect(() => {
    localStorage.setItem('reservationFormData', JSON.stringify(formData));
  }, [formData]);

  // Update localStorage whenever reservations change
  useEffect(() => {
    localStorage.setItem('reservations', JSON.stringify(reservations));
  }, [reservations]);

  // Close success message on Escape key
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape' && showSuccessMessage) {
        closeSuccessMessage();
      }
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [showSuccessMessage]); // Dependency on showSuccessMessage

  // --- Validation Functions ---
  const isValidEmail = (email) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const isValidPhone = (phone) => {
    return /^[\+]?[\d\s\-\(\)]+$/.test(phone) && phone.replace(/\D/g, '').length >= 10;
  };

  const validateField = (name, value) => {
    let errorMessage = '';
    let isValid = true;

    if (
      (name === 'fullName' || name === 'email' || name === 'phone' ||
       name === 'date' || name === 'time' || name === 'guests') &&
      !value.trim()
    ) {
      isValid = false;
      errorMessage = `${name.charAt(0).toUpperCase() + name.slice(1).replace(/([A-Z])/g, ' $1').trim()} is required.`;
    } else if (name === 'email' && value && !isValidEmail(value)) {
      isValid = false;
      errorMessage = 'Please enter a valid email address.';
    } else if (name === 'phone' && value && !isValidPhone(value)) {
      isValid = false;
      errorMessage = 'Please enter a valid phone number.';
    }

    setErrors(prevErrors => ({
      ...prevErrors,
      [name]: errorMessage
    }));
    return isValid;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
    // Real-time validation after user types
    if (errors[name]) { // Only re-validate if there's an existing error for this field
      validateField(name, value);
    }
  };

  const handleBlur = (e) => {
    const { name, value } = e.target;
    validateField(name, value);
  };

  // --- Form Submission ---
  const handleSubmit = (e) => {
    e.preventDefault();

    let formIsValid = true;
    const newErrors = {};

    // Validate all required fields
    ['fullName', 'email', 'phone', 'date', 'time', 'guests'].forEach(field => {
      if (!validateField(field, formData[field])) {
        formIsValid = false;
        newErrors[field] = errors[field]; // Keep the error message generated by validateField
      }
    });

    setErrors(newErrors);

    if (!formIsValid) {
      // Focus on the first invalid field
      const firstInvalidField = Object.keys(newErrors).find(key => newErrors[key]);
      if (firstInvalidField) {
        document.getElementById(firstInvalidField)?.focus();
      }
      return;
    }

    // Add new reservation
    const newReservation = {
      id: Date.now(),
      ...formData,
      createdAt: new Date().toISOString()
    };
    setReservations(prevReservations => [...prevReservations, newReservation]);

    // Clear form and show success message
    setFormData({
      fullName: '',
      email: '',
      phone: '',
      date: '',
      time: '',
      guests: '',
      specialRequests: ''
    });
    setErrors({}); // Clear all errors after successful submission
    localStorage.removeItem('reservationFormData'); // Clear saved draft
    setShowSuccessMessage(true);
  };

  const closeSuccessMessage = () => {
    setShowSuccessMessage(false);
    document.getElementById('fullName')?.focus(); // Focus on first field after closing
  };

  const deleteReservation = (id) => {
    if (window.confirm('Are you sure you want to delete this reservation?')) {
      setReservations(prevReservations => prevReservations.filter(r => r.id !== id));
    }
  };

  return (
    <div>
      <Navbar/>
    <main className="container mt-6 mx-auto px-4 sm:px-6 py-6 sm:py-8 bg-[#F0D1D1]">
      {/* Page Header */}
      <header className="text-center mb-8 sm:mb-12">
        <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-4 mt-4">Make a Reservation</h1>
        <p className="text-lg sm:text-xl text-gray-700 px-4">Book your table for an unforgettable dining experience at Sarabi.</p>
      </header>

      {/* Reservation Form Section */}
      <section aria-labelledby="reservation-form-heading" className="max-w-4xl mx-auto ">
        <h2 id="reservation-form-heading" className="sr-only">Reservation Form</h2>

        <form id="reservationForm" onSubmit={handleSubmit} className="space-y-6 sm:space-y-8" noValidate aria-live="polite">
          {/* Contact Information */}
          <fieldset className="backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 bg-[#C9A995]">
            <h1 className="text-xl sm:text-2xl font-semibold text-gray-900 mb-4 sm:mb-6">Contact Information</h1>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
              <div className="w-full">
                <label htmlFor="fullName" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">Full Name <span
                    className="text-red-500" aria-label="required">*</span></label>
                <input
                  type="text"
                  id="fullName"
                  name="fullName"
                  value={formData.fullName}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  required
                  aria-describedby="fullName-error"
                  className={`w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.fullName ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                  placeholder="Enter your full name"
                  autoComplete="name"
                />
                <div id="fullName-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.fullName ? '' : 'hidden'}`} role="alert">{errors.fullName}</div>
              </div>
              <div className="w-full">
                <label htmlFor="email" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">Email Address <span
                    className="text-red-500" aria-label="required">*</span></label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  required
                  aria-describedby="email-error"
                  className={`w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.email ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                  placeholder="Enter your email address"
                  autoComplete="email"
                />
                <div id="email-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.email ? '' : 'hidden'}`} role="alert">{errors.email}</div>
              </div>
            </div>
            <div className="mt-4 sm:mt-6 md:w-1/2">
              <label htmlFor="phone" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">Phone Number <span
                  className="text-red-500" aria-label="required">*</span></label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                onBlur={handleBlur}
                required
                aria-describedby="phone-error"
                className={`w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.phone ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                placeholder="Enter your phone number"
                autoComplete="tel"
              />
              <div id="phone-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.phone ? '' : 'hidden'}`} role="alert">{errors.phone}</div>
            </div>
          </fieldset>

          {/* Reservation Details */}
          <fieldset className="bg-[#C9A995] backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8">
            <h1 className="text-xl sm:text-2xl font-semibold text-gray-900 mb-4 sm:mb-6">Reservation Details</h1>
            {/* Main grid container */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
              {/* Date input */}
              <div className="col-span-1"> {/* On mobile (sm:grid-cols-2), this takes 1/2 width. On lg, 1/3rd. */}
                <label htmlFor="date" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">
                  <svg className="inline w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Date <span className="text-red-500" aria-label="required">*</span>
                </label>
                <input
                  type="date"
                  id="date"
                  name="date"
                  value={formData.date}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  required
                  aria-describedby="date-error"
                  className={`w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.date ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                />
                <div id="date-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.date ? '' : 'hidden'}`} role="alert">{errors.date}</div>
              </div>
              {/* Time select */}
              <div className="col-span-1"> {/* On mobile (sm:grid-cols-2), this takes 1/2 width. On lg, 1/3rd. */}
                <label htmlFor="time" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">
                  <svg className="inline w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Time <span className="text-red-500" aria-label="required">*</span>
                </label>
                <select
                  id="time"
                  name="time"
                  value={formData.time}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  required
                  aria-describedby="time-error"
                  className={`w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.time ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                >
                  <option value="">Select time</option>
                  <option value="5:00 PM">5:00 PM</option>
                  <option value="5:30 PM">5:30 PM</option>
                  <option value="6:00 PM">6:00 PM</option>
                  <option value="6:30 PM">6:30 PM</option>
                  <option value="7:00 PM">7:00 PM</option>
                  <option value="7:30 PM">7:30 PM</option>
                  <option value="8:00 PM">8:00 PM</option>
                  <option value="8:30 PM">8:30 PM</option>
                  <option value="9:00 PM">9:00 PM</option>
                  <option value="9:30 PM">9:30 PM</option>
                  <option value="10:00 PM">10:00 PM</option>
                </select>
                <div id="time-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.time ? '' : 'hidden'}`} role="alert">{errors.time}</div>
              </div>
              {/* Guests select */}
              {/* On mobile, this will break to a new row (col-span-1 in a grid-cols-1 or sm:col-span-2 if it were forced).
                  On small screens, it should be within a 'col-span-1' but its internal select should be w-3/4.
                  On lg screens, it becomes col-span-1 again. */}
              <div className="col-span-1 w-full sm:col-span-2 lg:col-span-1"> {/* For small screens, this breaks to its own row */}
                  <label htmlFor="guests" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">
                    <svg className="inline w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <span className="hidden sm:inline">Number of guests</span>
                    <span className="sm:hidden">Guests</span>
                    <span className="text-red-500" aria-label="required">*</span>
                  </label>
                  {/* The select element itself will take w-full by default, but w-3/4 on sm screens */}
                  <select
                    id="guests"
                    name="guests"
                    value={formData.guests}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    required
                    aria-describedby="guests-error"
                    className={`w-full sm:w-3/4 px-3 sm:px-4 py-2 sm:py-3 rounded-lg border bg-white ${errors.guests ? 'border-red-500' : 'border-gray-300'} focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base`}
                  >
                    <option value="">Select guests</option>
                    <option value="1">1 guest</option>
                    <option value="2">2 guests</option>
                    <option value="3">3 guests</option>
                    <option value="4">4 guests</option>
                    <option value="5">5 guests</option>
                    <option value="6">6 guests</option>
                    <option value="7">7 guests</option>
                    <option value="8">8 guests</option>
                    <option value="9+">9+ guests</option>
                  </select>
                  <div id="guests-error" className={`text-red-500 text-xs sm:text-sm mt-1 ${errors.guests ? '' : 'hidden'}`} role="alert">{errors.guests}</div>
              </div>
            </div>

            {/* Special Occasion */}
            <div className="mt-6 sm:mt-8">
              <fieldset>
                <h1 className="text-lg sm:text-xl font-semibold text-gray-900 mb-3 sm:mb-4">Special Occasion</h1>
                <label htmlFor="specialRequests" className="block text-gray-800 font-medium mb-2 text-sm sm:text-base">Special
                  Occasion Requests (Optional) :</label>
                <textarea
                  id="specialRequests"
                  name="specialRequests"
                  rows="3"
                  value={formData.specialRequests}
                  onChange={handleChange}
                  aria-describedby="specialRequests-help"
                  className="w-full px-3 sm:px-4 py-2 sm:py-3 rounded-lg border border-gray-300 bg-white focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm sm:text-base resize-none"
                  placeholder="Please let us know any dietary restrictions, allergies, or special requests..."
                ></textarea>
                <div id="specialRequests-help" className="text-gray-600 text-xs sm:text-sm mt-1">Include any dietary
                  restrictions, allergies, celebrations, or other special requests.</div>
              </fieldset>
            </div>
          </fieldset>

          {/* Submit Button */}
          <div className="text-center">
            <button type="submit"
              className="w-full sm:w-auto px-8 sm:px-12 py-3 sm:py-4 bg-[#EB9D69] hover:bg-amber-600 text-white font-semibold rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-amber-300 text-sm sm:text-base">
              Confirm Reservation
            </button>
          </div>
        </form>
      </section>

      {/* Restaurant Information Section */}
      <section aria-labelledby="restaurant-info-heading" className="max-w-4xl mx-auto mt-16">
        <h2 id="restaurant-info-heading" className="text-3xl font-bold text-gray-900 text-center mb-12">Reservation
          Information</h2>

        <div className="grid md:grid-cols-2 gap-8">
          {/* Dining Hours */}
          <article className="bg-[#C9A995] backdrop-blur-sm rounded-2xl p-8">
            <h3 className="text-2xl font-semibold text-gray-900 mb-6 text-center">Dining Hours</h3>
            <dl className="space-y-4">
              <div className="flex justify-between items-center">
                <dt className="text-gray-800 font-medium">Monday - Thursday:</dt>
                <dd className="text-gray-700">
                  <time dateTime="17:00">5:00PM</time> - <time dateTime="22:00">10:00PM</time>
                </dd>
              </div>
              <div className="flex justify-between items-center">
                <dt className="text-gray-800 font-medium">Friday - Saturday:</dt>
                <dd className="text-gray-700">
                  <time dateTime="17:00">5:00PM</time> - <time dateTime="23:00">11:00PM</time>
                </dd>
              </div>
              <div className="flex justify-between items-center">
                <dt className="text-gray-800 font-medium">Sunday:</dt>
                <dd className="text-gray-700">
                  <time dateTime="16:00">4:00PM</time> - <time dateTime="21:00">9:00PM</time>
                </dd>
              </div>
            </dl>
          </article>

          {/* Policies */}
          <article className="bg-[#C9A995] backdrop-blur-sm rounded-2xl p-8">
            <h3 className="text-2xl font-semibold text-gray-900 mb-6 text-center">Policies</h3>
            <ul className="space-y-4 text-gray-700">
              <li>• Reserves held for 15 minutes.</li>
              <li>• Cancellations accepted until 2 hours prior</li>
              <li>• Large parties (8+) may require deposit</li>
            </ul>
          </article>
        </div>
      </section>

      {/* Saved Reservations Section */}
      <section aria-labelledby="saved-reservations-heading" id="savedReservations" className="max-w-4xl mx-auto mt-16">
        <h2 id="saved-reservations-heading" className="text-3xl font-bold text-gray-900 text-center mb-8">Your Reservations</h2>
        <div id="reservationsList" className="space-y-4" role="list" aria-live="polite">
          {reservations.length === 0 ? (
            <p className="text-center text-gray-600">No reservations found.</p>
          ) : (
            reservations.map(reservation => (
              <article key={reservation.id} className="bg-white/20 backdrop-blur-sm rounded-xl p-6 border border-white/30" role="listitem">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900">{escapeHtml(reservation.fullName)}</h3>
                    <p className="text-gray-700">{escapeHtml(reservation.email)}</p>
                  </div>
                  <button onClick={() => deleteReservation(reservation.id)} className="text-red-500 hover:text-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 rounded p-1" aria-label={`Delete reservation for ${escapeHtml(reservation.fullName)}`}>
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
                <dl className="grid md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <dt className="font-medium text-gray-800">Date:</dt>
                    <dd className="text-gray-700">
                      <time dateTime={reservation.date}>{new Date(reservation.date).toLocaleDateString()}</time>
                    </dd>
                  </div>
                  <div>
                    <dt className="font-medium text-gray-800">Time:</dt>
                    <dd className="text-gray-700">{escapeHtml(reservation.time)}</dd>
                  </div>
                  <div>
                    <dt className="font-medium text-gray-800">Guests:</dt>
                    <dd className="text-gray-700">{escapeHtml(reservation.guests)}</dd>
                  </div>
                </dl>
                {reservation.specialRequests && (
                  <div className="mt-4">
                    <dt className="font-medium text-gray-800">Special Requests:</dt>
                    <dd className="text-gray-700">{escapeHtml(reservation.specialRequests)}</dd>
                  </div>
                )}
              </article>
            ))
          )}
        </div>
      </section>

      {/* Success Message Modal */}
      {showSuccessMessage && (
        <div id="successMessage" className="fixed inset-0 bg-black/50 flex items-center justify-center z-50" role="dialog"
          aria-modal="true" aria-labelledby="success-title" aria-describedby="success-description">
          <div className="bg-white rounded-2xl p-8 max-w-md mx-4">
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4" role="img"
                aria-label="Success checkmark">
                <svg className="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <h3 id="success-title" className="text-xl font-semibold text-gray-900 mb-2">Reservation Confirmed!</h3>
              <p id="success-description" className="text-gray-600 mb-6">Thank you for your reservation. We look forward to serving you!</p>
              <button onClick={closeSuccessMessage}
                className="px-6 py-2 bg-amber-500 hover:bg-amber-600 text-white rounded-lg transition-colors focus:outline-none focus:ring-4 focus:ring-amber-300">
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
    <Footer/>
    </div>
  );
};

export default ReservationPage;